{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Monkeyble Welcome to the Monkeyble documentation! \ud83d\udc4b Monkeyble is a callback plugin for Ansible that allow to execute end-to-end tests on Ansible playbooks with a Pythonic testing approach. \ud83d\udc0d Monkeyble allows, at task level, to: \ud83d\udc35 Check that a module has been called with expected argument values \ud83d\ude4a Check that a module returned the expected result dictionary \ud83d\ude48 Check the task state (changed, skipped, failed) \ud83d\ude49 Mock a module and return a defined dictionary as result Monkeyble is designed to be executed by a CI/CD in order to detect regressions when updating an Ansible code base. \ud83d\ude80","title":"Monkeyble"},{"location":"#monkeyble","text":"Welcome to the Monkeyble documentation! \ud83d\udc4b Monkeyble is a callback plugin for Ansible that allow to execute end-to-end tests on Ansible playbooks with a Pythonic testing approach. \ud83d\udc0d Monkeyble allows, at task level, to: \ud83d\udc35 Check that a module has been called with expected argument values \ud83d\ude4a Check that a module returned the expected result dictionary \ud83d\ude48 Check the task state (changed, skipped, failed) \ud83d\ude49 Mock a module and return a defined dictionary as result Monkeyble is designed to be executed by a CI/CD in order to detect regressions when updating an Ansible code base. \ud83d\ude80","title":"Monkeyble"},{"location":"ci_cd_usage/","text":"CI/CD usage This is an example script you could use to test a playbook against all your scenarios #/bin/bash set -e # exit when any command fails ANSIBLE_CMD = \"ANSIBLE_CONFIG='ansible.cfg' ansible-playbook -v\" function test_all_scenario () { # $1: playbook path # $2: vars path # $3: list scenario local PLAYBOOK_PATH = $1 local VARS_PATH = $2 shift # Shift all arguments to the left (original $1 gets lost) shift # Shift all arguments to the left (original $2 gets lost) local LIST_SCENARIO =( \" $@ \" ) # Represents the remaining parameters for scenario in \" ${ LIST_SCENARIO [@] } \" ; do echo \"Run Monkeyble scenario: $scenario \" $ANSIBLE_CMD \\ $PLAYBOOK_PATH \\ -e \"@ ${ VARS_PATH } \" \\ -e \"monkeyble_scenario= $scenario \" done } echo \"Monkeyble test playbook start...\" LIST_SCENARIO =( \"validate_scenario_1\" \"validate_scenario_2\" \"validate_scenario_3\" ) PLAYBOOK_PATH = \"playbook.yml\" VARS_PATH = \"monkeyble.yml\" test_all_scenario $PLAYBOOK_PATH $VARS_PATH \" ${ LIST_SCENARIO [@] } \"","title":"CI/CD usage"},{"location":"ci_cd_usage/#cicd-usage","text":"This is an example script you could use to test a playbook against all your scenarios #/bin/bash set -e # exit when any command fails ANSIBLE_CMD = \"ANSIBLE_CONFIG='ansible.cfg' ansible-playbook -v\" function test_all_scenario () { # $1: playbook path # $2: vars path # $3: list scenario local PLAYBOOK_PATH = $1 local VARS_PATH = $2 shift # Shift all arguments to the left (original $1 gets lost) shift # Shift all arguments to the left (original $2 gets lost) local LIST_SCENARIO =( \" $@ \" ) # Represents the remaining parameters for scenario in \" ${ LIST_SCENARIO [@] } \" ; do echo \"Run Monkeyble scenario: $scenario \" $ANSIBLE_CMD \\ $PLAYBOOK_PATH \\ -e \"@ ${ VARS_PATH } \" \\ -e \"monkeyble_scenario= $scenario \" done } echo \"Monkeyble test playbook start...\" LIST_SCENARIO =( \"validate_scenario_1\" \"validate_scenario_2\" \"validate_scenario_3\" ) PLAYBOOK_PATH = \"playbook.yml\" VARS_PATH = \"monkeyble.yml\" test_all_scenario $PLAYBOOK_PATH $VARS_PATH \" ${ LIST_SCENARIO [@] } \"","title":"CI/CD usage"},{"location":"dev_env/","text":"Setup a dev environment Requirements: ansible > 2.11 Clone the project: git clone https://github.com/HewlettPackard/monkeyble Dev with Ansible CLI Update the test ansible playbook in tests/test_playbook.yml Update the monkeyble config in tests/monkeyble.yml Run the playbook using the provided ansible.cfg that point to the local repository: ANSIBLE_CONFIG = \"ansible.cfg\" ansible-playbook tests/test_playbook.yml -e \"@tests/monkeyble.yml\" -e \"monkeyble_scenario=validate_test_1\" Dev with Python To use the python debugger you can execute the python script tests/local_play.py which is based on the Ansible Python API. python3 tests/local_play.py","title":"Dev env"},{"location":"dev_env/#setup-a-dev-environment","text":"Requirements: ansible > 2.11 Clone the project: git clone https://github.com/HewlettPackard/monkeyble","title":"Setup a dev environment"},{"location":"dev_env/#dev-with-ansible-cli","text":"Update the test ansible playbook in tests/test_playbook.yml Update the monkeyble config in tests/monkeyble.yml Run the playbook using the provided ansible.cfg that point to the local repository: ANSIBLE_CONFIG = \"ansible.cfg\" ansible-playbook tests/test_playbook.yml -e \"@tests/monkeyble.yml\" -e \"monkeyble_scenario=validate_test_1\"","title":"Dev with Ansible CLI"},{"location":"dev_env/#dev-with-python","text":"To use the python debugger you can execute the python script tests/local_play.py which is based on the Ansible Python API. python3 tests/local_play.py","title":"Dev with Python"},{"location":"extra_vars/","text":"Extra vars The extra_vars flag will override default variables when executing a task. This allows to change variable in the context of a scenario to validate a playbook behavior. Syntax monkeyble_scenarios : validate_test_1 : name : \"Monkeyble hello world\" tasks_to_test : - task : \"debug task\" extra_vars : new_var_key : \"new_value\" override_existing_key : \"other value\" Example # playbook.yml - name : \"play1\" hosts : localhost connection : local gather_facts : false become : false vars : my_var : \"Hello Monkeyble\" tasks : - name : \"task1\" debug : msg : \"{{ my_var }}\" - name : \"task2\" debug : msg : \"{{ my_var }}\" # monkeyble.yml monkeyble_scenarios : validate_test_1 : name : \"Monkeyble hello world\" tasks_to_test : - task : \"task2\" extra_vars : my_var : \"new value\" When executed, the second task use the overriden variable value instead of the default one set at playbook level: PLAY [play1] ******************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************* Starting Monkeyble callback monkeyble_scenario: validate_test_1 Monkeyble scenario: Monkeyble hello world TASK [task1] ******************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************* ok: [localhost] => { \"msg\": \"Hello Monkeyble\" } TASK [task2] ******************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************* ok: [localhost] => { \"msg\": \"new value\" } PLAY RECAP ********************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************* localhost : ok=2 changed=0 unreachable=0 failed=0 skipped=0 rescued=0 ignored=0","title":"Task extra vars"},{"location":"extra_vars/#extra-vars","text":"The extra_vars flag will override default variables when executing a task. This allows to change variable in the context of a scenario to validate a playbook behavior.","title":"Extra vars"},{"location":"extra_vars/#syntax","text":"monkeyble_scenarios : validate_test_1 : name : \"Monkeyble hello world\" tasks_to_test : - task : \"debug task\" extra_vars : new_var_key : \"new_value\" override_existing_key : \"other value\"","title":"Syntax"},{"location":"extra_vars/#example","text":"# playbook.yml - name : \"play1\" hosts : localhost connection : local gather_facts : false become : false vars : my_var : \"Hello Monkeyble\" tasks : - name : \"task1\" debug : msg : \"{{ my_var }}\" - name : \"task2\" debug : msg : \"{{ my_var }}\" # monkeyble.yml monkeyble_scenarios : validate_test_1 : name : \"Monkeyble hello world\" tasks_to_test : - task : \"task2\" extra_vars : my_var : \"new value\" When executed, the second task use the overriden variable value instead of the default one set at playbook level: PLAY [play1] ******************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************* Starting Monkeyble callback monkeyble_scenario: validate_test_1 Monkeyble scenario: Monkeyble hello world TASK [task1] ******************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************* ok: [localhost] => { \"msg\": \"Hello Monkeyble\" } TASK [task2] ******************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************* ok: [localhost] => { \"msg\": \"new value\" } PLAY RECAP ********************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************* localhost : ok=2 changed=0 unreachable=0 failed=0 skipped=0 rescued=0 ignored=0","title":"Example"},{"location":"hello_world/","text":"Hello Monkeyble For the example, consider this playbook - name : \"Testing play\" hosts : localhost connection : local gather_facts : false become : false tasks : - name : \"debug task\" debug : msg : \"Hello Monkeyble\" You need an extra var file that will contain all your Monkeyble scenarios. For example monkeyble.yml . monkeyble_scenarios : validate_test_1 : name : \"Monkeyble hello world\" tasks_to_test : - task : \"debug task\" test_input : - assert_equal : arg_name : msg expected : \"Hello Monkeyble\" Then, call your playbook by passing the Ansible configuration, the extra var file that contains all your scenarios and the selected scenario to validate. ANSIBLE_CONFIG = \"ansible.cfg\" ansible-playbook \\ playbook.yml \\ -e \"@monkeyble.yml\" \\ -e \"monkeyble_scenario=validate_test_1\" Here is the output: PLAY [Testing play] ************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************ Starting Monkeyble callback monkeyble_scenario: validate_test_1 Monkeyble scenario: Monkeyble hello world TASK [debug task] ************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************** {'monkeyble_passed_test': [{'test_name': 'assert_equal', 'tested_value': 'Hello Monkeyble', 'expected': 'Hello Monkeyble'}], 'monkeyble_failed_test': []} ok: [localhost] => { \"msg\": \"Hello Monkeyble\" } PLAY RECAP ********************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************* localhost : ok=1 changed=0 unreachable=0 failed=0 skipped=0 rescued=0 ignored=0 Monkeyble - ALL TESTS PASSED - scenario: Monkeyble hello world The debug module has been well called with the expected argument value. The test passed. The return code on stderr is 0 . Let's change the test to make it fail. We update the executed task and change the msg argument of the debug module. - name : \"debug task\" debug : msg : \"Goodbye Monkeyble\" We execute the playbook the same way. The result is now the following: PLAY [Testing play] ************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************ Starting Monkeyble callback monkeyble_scenario: validate_test_1 Monkeyble scenario: Monkeyble hello world TASK [debug task] ************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************** Monkeyble failed scenario: Monkeyble hello world {'monkeyble_passed_test': [], 'monkeyble_failed_test': [{'test_name': 'assert_equal', 'tested_value': 'Goodbye Monkeyble', 'expected': 'Hello Monkeyble'}]} This time the test has failed. The return code on stderr is 1 .","title":"Hello world"},{"location":"hello_world/#hello-monkeyble","text":"For the example, consider this playbook - name : \"Testing play\" hosts : localhost connection : local gather_facts : false become : false tasks : - name : \"debug task\" debug : msg : \"Hello Monkeyble\" You need an extra var file that will contain all your Monkeyble scenarios. For example monkeyble.yml . monkeyble_scenarios : validate_test_1 : name : \"Monkeyble hello world\" tasks_to_test : - task : \"debug task\" test_input : - assert_equal : arg_name : msg expected : \"Hello Monkeyble\" Then, call your playbook by passing the Ansible configuration, the extra var file that contains all your scenarios and the selected scenario to validate. ANSIBLE_CONFIG = \"ansible.cfg\" ansible-playbook \\ playbook.yml \\ -e \"@monkeyble.yml\" \\ -e \"monkeyble_scenario=validate_test_1\" Here is the output: PLAY [Testing play] ************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************ Starting Monkeyble callback monkeyble_scenario: validate_test_1 Monkeyble scenario: Monkeyble hello world TASK [debug task] ************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************** {'monkeyble_passed_test': [{'test_name': 'assert_equal', 'tested_value': 'Hello Monkeyble', 'expected': 'Hello Monkeyble'}], 'monkeyble_failed_test': []} ok: [localhost] => { \"msg\": \"Hello Monkeyble\" } PLAY RECAP ********************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************* localhost : ok=1 changed=0 unreachable=0 failed=0 skipped=0 rescued=0 ignored=0 Monkeyble - ALL TESTS PASSED - scenario: Monkeyble hello world The debug module has been well called with the expected argument value. The test passed. The return code on stderr is 0 . Let's change the test to make it fail. We update the executed task and change the msg argument of the debug module. - name : \"debug task\" debug : msg : \"Goodbye Monkeyble\" We execute the playbook the same way. The result is now the following: PLAY [Testing play] ************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************ Starting Monkeyble callback monkeyble_scenario: validate_test_1 Monkeyble scenario: Monkeyble hello world TASK [debug task] ************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************** Monkeyble failed scenario: Monkeyble hello world {'monkeyble_passed_test': [], 'monkeyble_failed_test': [{'test_name': 'assert_equal', 'tested_value': 'Goodbye Monkeyble', 'expected': 'Hello Monkeyble'}]} This time the test has failed. The return code on stderr is 1 .","title":"Hello Monkeyble"},{"location":"installation/","text":"Installation Using the git repository Clone the repository git clone https://github.com/HewlettPackard/monkeyble Create a dedicated ansible.cfg config file that use the \"Monkeyble\" callback and declare the monkeyble mock module [defaults] library = /path/to/monkeyble/plugins/library module_utils = /path/to/monkeyble/plugins/module_utils callback_plugins = /path/to/monkeyble/plugins/callback callbacks_enabled = monkeyble_callback jinja2_native = True Note jinja2_native is mandatory to interpret correctly null values That's it. Monkeyble is installed. See now the Hello world section to learn the basics. Using Ansible Galaxy Check that you have a collection path declared in your ansible config ( collections_paths ). E.g: [defaults] collections_paths = /home/my_user/Documents Note Ansible expect to find a folder named ansible_collections in the defined collections_paths Install Monkeyble with ansible-galaxy and git repo: ansible-galaxy collection install git+https://github.com/HewlettPackard/monkeyble Install Monkeyble with ansible-galaxy: ansible-galaxy collection install hpe.monkeyble Create a dedicated ansible.cfg config file that use the \"Monkeyble\" callback and declare the monkeyble mock module [defaults] collections_paths = /home/my_user/Documents library = /home/my_user/Documents/ansible_collections/hpe/monkeyble/plugins/library module_utils = /home/my_user/Documents/ansible_collections/hpe/monkeyble/plugins/module_utils callback_plugins = /home/my_user/Documents/ansible_collections/hpe/monkeyble/plugins/callback callbacks_enabled = monkeyble_callback jinja2_native = True","title":"Installation"},{"location":"installation/#installation","text":"","title":"Installation"},{"location":"installation/#using-the-git-repository","text":"Clone the repository git clone https://github.com/HewlettPackard/monkeyble Create a dedicated ansible.cfg config file that use the \"Monkeyble\" callback and declare the monkeyble mock module [defaults] library = /path/to/monkeyble/plugins/library module_utils = /path/to/monkeyble/plugins/module_utils callback_plugins = /path/to/monkeyble/plugins/callback callbacks_enabled = monkeyble_callback jinja2_native = True Note jinja2_native is mandatory to interpret correctly null values That's it. Monkeyble is installed. See now the Hello world section to learn the basics.","title":"Using the git repository"},{"location":"installation/#using-ansible-galaxy","text":"Check that you have a collection path declared in your ansible config ( collections_paths ). E.g: [defaults] collections_paths = /home/my_user/Documents Note Ansible expect to find a folder named ansible_collections in the defined collections_paths Install Monkeyble with ansible-galaxy and git repo: ansible-galaxy collection install git+https://github.com/HewlettPackard/monkeyble Install Monkeyble with ansible-galaxy: ansible-galaxy collection install hpe.monkeyble Create a dedicated ansible.cfg config file that use the \"Monkeyble\" callback and declare the monkeyble mock module [defaults] collections_paths = /home/my_user/Documents library = /home/my_user/Documents/ansible_collections/hpe/monkeyble/plugins/library module_utils = /home/my_user/Documents/ansible_collections/hpe/monkeyble/plugins/module_utils callback_plugins = /home/my_user/Documents/ansible_collections/hpe/monkeyble/plugins/callback callbacks_enabled = monkeyble_callback jinja2_native = True","title":"Using Ansible Galaxy"},{"location":"mock/","text":"Mock Mock modules are simulated modules that mimic the behaviour of real module in controlled ways. Mock can be used to test the behavior of a playbook without actually perform some operations like creating resource in a cloud or in IT infrastructure. The mock module can return values so the tested playbook can register new variable from its output like if the real module had been called. Syntax Monkeyble config example: monkeyble_scenarios : validate_test_1 : name : \"Monkeyble hello world\" tasks_to_test : - task : \"debug task\" mock : config : # <new module> The monkeyble mock module Monkeyble comes with a mock module that return a configured dict. Considering this task from a role or a playbook. We create a VM in a VMware hypervisor. - name : \"Create a virtual machine on given ESXi hostname\" community.vmware.vmware_guest : hostname : \"{{ vcenter_hostname }}\" username : \"{{ vcenter_username }}\" password : \"{{ vcenter_password }}\" folder : /DC1/vm/ name : test_vm_0001 state : present guest_id : centos64Guest esxi_hostname : \"{{ esxi_hostname }}\" disk : - size_gb : 10 type : thin datastore : datastore1 hardware : memory_mb : 512 num_cpus : 4 scsi : paravirtual networks : - name : VM Network delegate_to : localhost register : deploy_vm # the next task in the playbook actually need a value from # the output of previous task - name : Get the mac address from the VM creation set_fact : mac_address : \"{{ deploy_vm.instance.hw_eth0.macaddress }}\" - name : \"Print the generated mac\" debug : var : mac_address We don't need to test the module itself because the provider guaranty it is working and does what it is supposed to do. We also don't want to actually create a VM in our infrastructure each time we run our test from the CI/CD. For that case, we can mock the module by replacing it with the Monkeyble mock module: - task : \"Create a virtual machine on given ESXi hostname\" mock : config : monkeyble_module : consider_changed : true result_dict : instance : hw_eth0 : macaddress : \"01:02:b1:03:04:9d\" When the playbook is executed, the module of the task is replaced by the mock PLAY [Testing play] ************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************ Starting Monkeyble callback monkeyble_scenario: validate_test_1 Monkeyble scenario: Monkeyble hello world TASK [Create a virtual machine on given ESXi hostname] ************************************************************************************************************************************************************************************************************************************************************************************************************************************* Monkeyble mock module - Before: 'community.vmware.vmware_guest' Now: 'monkeyble_module' changed: [localhost] TASK [Get the mac address from the VM creation] ******************************************************************************************************************************************************************************************************************************************************************************************************************************************** ok: [localhost] TASK [Print the generated mac] ************************************************************************************************************************************************************************************************************************************************************************************************************************************************************* ok: [localhost] => { \"mac_address\": \"01:02:b1:03:04:9d\" } PLAY RECAP ********************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************* localhost : ok=3 changed=1 unreachable=0 failed=0 skipped=0 rescued=0 ignored=0 Using your own mock module A custom module can be used instead of the Monkeyble one. For more information follow the official Ansible documentation . Monkeyble config example: monkeyble_scenarios : validate_test_1 : name : \"Monkeyble hello world\" tasks_to_test : - task : \"task1\" mock : config : my_module : my_arg : \"value\" Module python code example of my_module.py : from ansible.module_utils.basic import AnsibleModule def run_module (): module_args = { 'my_arg' : dict ( type = 'str' , required = True ), } module = AnsibleModule ( argument_spec = module_args , supports_check_mode = True ) module . log ( msg = 'My module started' ) # ------------------------------ # PLACE HERE YOUR MAGIC THAT UPDATE THE 'result' DICT # ------------------------------ result = { 'custom_result' : 'hello there !' , 'changed' : True , } module . exit_json ( ** result ) def main (): run_module () if __name__ == '__main__' : main ()","title":"Mock"},{"location":"mock/#mock","text":"Mock modules are simulated modules that mimic the behaviour of real module in controlled ways. Mock can be used to test the behavior of a playbook without actually perform some operations like creating resource in a cloud or in IT infrastructure. The mock module can return values so the tested playbook can register new variable from its output like if the real module had been called.","title":"Mock"},{"location":"mock/#syntax","text":"Monkeyble config example: monkeyble_scenarios : validate_test_1 : name : \"Monkeyble hello world\" tasks_to_test : - task : \"debug task\" mock : config : # <new module>","title":"Syntax"},{"location":"mock/#the-monkeyble-mock-module","text":"Monkeyble comes with a mock module that return a configured dict. Considering this task from a role or a playbook. We create a VM in a VMware hypervisor. - name : \"Create a virtual machine on given ESXi hostname\" community.vmware.vmware_guest : hostname : \"{{ vcenter_hostname }}\" username : \"{{ vcenter_username }}\" password : \"{{ vcenter_password }}\" folder : /DC1/vm/ name : test_vm_0001 state : present guest_id : centos64Guest esxi_hostname : \"{{ esxi_hostname }}\" disk : - size_gb : 10 type : thin datastore : datastore1 hardware : memory_mb : 512 num_cpus : 4 scsi : paravirtual networks : - name : VM Network delegate_to : localhost register : deploy_vm # the next task in the playbook actually need a value from # the output of previous task - name : Get the mac address from the VM creation set_fact : mac_address : \"{{ deploy_vm.instance.hw_eth0.macaddress }}\" - name : \"Print the generated mac\" debug : var : mac_address We don't need to test the module itself because the provider guaranty it is working and does what it is supposed to do. We also don't want to actually create a VM in our infrastructure each time we run our test from the CI/CD. For that case, we can mock the module by replacing it with the Monkeyble mock module: - task : \"Create a virtual machine on given ESXi hostname\" mock : config : monkeyble_module : consider_changed : true result_dict : instance : hw_eth0 : macaddress : \"01:02:b1:03:04:9d\" When the playbook is executed, the module of the task is replaced by the mock PLAY [Testing play] ************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************ Starting Monkeyble callback monkeyble_scenario: validate_test_1 Monkeyble scenario: Monkeyble hello world TASK [Create a virtual machine on given ESXi hostname] ************************************************************************************************************************************************************************************************************************************************************************************************************************************* Monkeyble mock module - Before: 'community.vmware.vmware_guest' Now: 'monkeyble_module' changed: [localhost] TASK [Get the mac address from the VM creation] ******************************************************************************************************************************************************************************************************************************************************************************************************************************************** ok: [localhost] TASK [Print the generated mac] ************************************************************************************************************************************************************************************************************************************************************************************************************************************************************* ok: [localhost] => { \"mac_address\": \"01:02:b1:03:04:9d\" } PLAY RECAP ********************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************* localhost : ok=3 changed=1 unreachable=0 failed=0 skipped=0 rescued=0 ignored=0","title":"The monkeyble mock module"},{"location":"mock/#using-your-own-mock-module","text":"A custom module can be used instead of the Monkeyble one. For more information follow the official Ansible documentation . Monkeyble config example: monkeyble_scenarios : validate_test_1 : name : \"Monkeyble hello world\" tasks_to_test : - task : \"task1\" mock : config : my_module : my_arg : \"value\" Module python code example of my_module.py : from ansible.module_utils.basic import AnsibleModule def run_module (): module_args = { 'my_arg' : dict ( type = 'str' , required = True ), } module = AnsibleModule ( argument_spec = module_args , supports_check_mode = True ) module . log ( msg = 'My module started' ) # ------------------------------ # PLACE HERE YOUR MAGIC THAT UPDATE THE 'result' DICT # ------------------------------ result = { 'custom_result' : 'hello there !' , 'changed' : True , } module . exit_json ( ** result ) def main (): run_module () if __name__ == '__main__' : main ()","title":"Using your own mock module"},{"location":"scenarios/","text":"Scenarios A scenario is like a real-world use cases of the playbook under test. Scenarios are generally derived from user stories. Syntax The monkeyble configuration is given to the playbook to be tested as an extra var . The best approach consist into creating a dedicated var file like monkeyble.yml that contains the set of variable used by the playbook to test as well as the Monkeyble configuration placed in the monkeyble_scenarios variable. E.g: # monkeyble.yml # playbook variables my_var : \"value\" my_other_var : \"other value\" # monkeyble config monkeyble_scenarios : scenario1 : name : \"Validate that we can create a VM\" # config scenario2 : name : \"Validate that the playbook stop when wrong DNS name is given\" # config scenario3 : name : \"Validate that the selected network is prod when 'prod' flag is true\" # config Scenario Scenario configuration: name : The scenario description Test input : Test instantiated arguments of a task module Test output : Test the result dictionary of an executed task Test state : Check the state of the task (changed, skipped, failed) Mock : Mock the executed module of a task Task filter : Filter tested tasks by role or playbook name Task extra vars : Override the default extra variable set a playbook level Execute a playbook to test against a scenario: ANSIBLE_CONFIG = \"ansible.cfg\" ansible-playbook playbook.yml \\ -e \"@<path_to_extra_var>\" \\ -e \"monkeyble_scenario=<scenario_name>\" E.G: ANSIBLE_CONFIG = \"ansible.cfg\" ansible-playbook playbook.yml \\ -e \"@monkeyble.yml\" \\ -e \"monkeyble_scenario=validate_test_1\" Re-using test code As the configuration is passed as an extra var, usage of jinja template is available to reuse some part of your configuration E.g: test_input_config : - assert_equal : arg_name : msg expected : \"general kenobi\" monkeyble_scenarios : scenario_1 : name : \"Check the general name\" tasks_to_test : - task : \"a task\" test_input : \"{{ test_input_config }}\" scenario_2 : name : \"Check the general name\" tasks_to_test : - task : \"another task\" test_input : \"{{ test_input_config }}\" Configuration can be placed in multiple files to be resued by multiple Monkeyble config # shared_tests.yml a_shared_test : - assert_equal : arg_name : msg expected : \"Hello Monkeyble\" # monkeyble.yml monkeyble_scenarios : validate_test_1 : name : \"Check the general name\" tasks_to_test : - task : \"debug task\" test_input : \"{{ a_shared_test }}\" Then call the playbook by passing all extra vars: ANSIBLE_CONFIG = \"ansible.cfg\" ansible-playbook playbook.yml \\ -e \"@shared_tests.yml\" \\ -e \"@monkeyble.yml\" \\ -e \"monkeyble_scenario=validate_test_1\" Ansible native test components The following Ansible components may be placed into playbooks and roles to prevent from failure: check_mode assert fail","title":"Scenarios"},{"location":"scenarios/#scenarios","text":"A scenario is like a real-world use cases of the playbook under test. Scenarios are generally derived from user stories.","title":"Scenarios"},{"location":"scenarios/#syntax","text":"The monkeyble configuration is given to the playbook to be tested as an extra var . The best approach consist into creating a dedicated var file like monkeyble.yml that contains the set of variable used by the playbook to test as well as the Monkeyble configuration placed in the monkeyble_scenarios variable. E.g: # monkeyble.yml # playbook variables my_var : \"value\" my_other_var : \"other value\" # monkeyble config monkeyble_scenarios : scenario1 : name : \"Validate that we can create a VM\" # config scenario2 : name : \"Validate that the playbook stop when wrong DNS name is given\" # config scenario3 : name : \"Validate that the selected network is prod when 'prod' flag is true\" # config","title":"Syntax"},{"location":"scenarios/#scenario","text":"Scenario configuration: name : The scenario description Test input : Test instantiated arguments of a task module Test output : Test the result dictionary of an executed task Test state : Check the state of the task (changed, skipped, failed) Mock : Mock the executed module of a task Task filter : Filter tested tasks by role or playbook name Task extra vars : Override the default extra variable set a playbook level Execute a playbook to test against a scenario: ANSIBLE_CONFIG = \"ansible.cfg\" ansible-playbook playbook.yml \\ -e \"@<path_to_extra_var>\" \\ -e \"monkeyble_scenario=<scenario_name>\" E.G: ANSIBLE_CONFIG = \"ansible.cfg\" ansible-playbook playbook.yml \\ -e \"@monkeyble.yml\" \\ -e \"monkeyble_scenario=validate_test_1\"","title":"Scenario"},{"location":"scenarios/#re-using-test-code","text":"As the configuration is passed as an extra var, usage of jinja template is available to reuse some part of your configuration E.g: test_input_config : - assert_equal : arg_name : msg expected : \"general kenobi\" monkeyble_scenarios : scenario_1 : name : \"Check the general name\" tasks_to_test : - task : \"a task\" test_input : \"{{ test_input_config }}\" scenario_2 : name : \"Check the general name\" tasks_to_test : - task : \"another task\" test_input : \"{{ test_input_config }}\" Configuration can be placed in multiple files to be resued by multiple Monkeyble config # shared_tests.yml a_shared_test : - assert_equal : arg_name : msg expected : \"Hello Monkeyble\" # monkeyble.yml monkeyble_scenarios : validate_test_1 : name : \"Check the general name\" tasks_to_test : - task : \"debug task\" test_input : \"{{ a_shared_test }}\" Then call the playbook by passing all extra vars: ANSIBLE_CONFIG = \"ansible.cfg\" ansible-playbook playbook.yml \\ -e \"@shared_tests.yml\" \\ -e \"@monkeyble.yml\" \\ -e \"monkeyble_scenario=validate_test_1\"","title":"Re-using test code"},{"location":"scenarios/#ansible-native-test-components","text":"The following Ansible components may be placed into playbooks and roles to prevent from failure: check_mode assert fail","title":"Ansible native test components"},{"location":"states/","text":"States Monkeyble allows to check the state of an executed task Syntax Monkeyble config example: monkeyble_scenarios : validate_test_1 : name : \"Monkeyble hello world\" tasks_to_test : - task : \"debug task\" should_be_changed : true should_be_skipped : false should_failed : false States should_be_changed # Task example - name : \"should_be_changed_false\" debug : msg : \"Obi-Wan Kenobi is a Jedi\" - name : \"should_be_changed_true\" command : ls # Monkeyble config - task : \"should_be_changed_false\" should_be_changed : false - task : \"should_be_changed_true\" should_be_changed : true should_be_skipped # Task example - when : \"side == 'dark'\" name : \"should_be_skipped\" debug : msg : \"going to the dark side\" # Monkeyble config - task : \"should_be_skipped\" should_be_skipped : true should_failed # Task example - name : \"should_failed\" fail : msg : \"save Palpatine\" # Monkeyble config - task : \"should_failed\" should_failed : true Warning The normal return code when a task fail in an Ansible is 1 . When a task is declared as should_failed in a Monkeyble and actually fail then the return code is O instead to prevent a CI/CD from concidering the test as a failure.","title":"Test states"},{"location":"states/#states","text":"Monkeyble allows to check the state of an executed task","title":"States"},{"location":"states/#syntax","text":"Monkeyble config example: monkeyble_scenarios : validate_test_1 : name : \"Monkeyble hello world\" tasks_to_test : - task : \"debug task\" should_be_changed : true should_be_skipped : false should_failed : false","title":"Syntax"},{"location":"states/#states_1","text":"","title":"States"},{"location":"states/#should_be_changed","text":"# Task example - name : \"should_be_changed_false\" debug : msg : \"Obi-Wan Kenobi is a Jedi\" - name : \"should_be_changed_true\" command : ls # Monkeyble config - task : \"should_be_changed_false\" should_be_changed : false - task : \"should_be_changed_true\" should_be_changed : true","title":"should_be_changed"},{"location":"states/#should_be_skipped","text":"# Task example - when : \"side == 'dark'\" name : \"should_be_skipped\" debug : msg : \"going to the dark side\" # Monkeyble config - task : \"should_be_skipped\" should_be_skipped : true","title":"should_be_skipped"},{"location":"states/#should_failed","text":"# Task example - name : \"should_failed\" fail : msg : \"save Palpatine\" # Monkeyble config - task : \"should_failed\" should_failed : true Warning The normal return code when a task fail in an Ansible is 1 . When a task is declared as should_failed in a Monkeyble and actually fail then the return code is O instead to prevent a CI/CD from concidering the test as a failure.","title":"should_failed"},{"location":"task_filters/","text":"Task filters Task filters allow to only test a particular task when the task name is placed into a defined role or play name. Syntax monkeyble_scenarios : validate_test_1 : name : \"Monkeyble hello world\" tasks_to_test : - task : \"debug task\" role : \"role_name\" # the test will be executed if the role matches play : \"play_name\" # the test will be executed if the play matches should_be_changed : true test_input : # config test_output : # config Example # playbook.yml - name : \"play1\" hosts : localhost connection : local gather_facts : false become : false tasks : - name : \"debug task\" debug : msg : \"Hello Monkeyble\" - name : \"play2\" hosts : localhost connection : local gather_facts : false become : false tasks : - name : \"debug task\" debug : msg : \"Hello Monkeyble\" # monkeyble.yml monkeyble_scenarios : validate_test_1 : name : \"Validate task is tested only in play1\" tasks_to_test : - task : \"debug task\" play : play1 test_input : - assert_equal : arg_name : msg expected : \"Hello Monkeyble\" When executed, the task \"debug task\" is only tested when executed from the play named \"play1\" PLAY [play1] ******************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************* Starting Monkeyble callback monkeyble_scenario: validate_test_1 Monkeyble scenario: Validate task is tested only in play1 TASK [debug task] ************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************** {'monkeyble_passed_test': [{'test_name': 'assert_equal', 'tested_value': 'Hello Monkeyble', 'expected': 'Hello Monkeyble'}], 'monkeyble_failed_test': []} ok: [localhost] => { \"msg\": \"Hello Monkeyble\" } PLAY [play2] ******************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************* Starting Monkeyble callback monkeyble_scenario: validate_test_1 Monkeyble scenario: Monkeyble hello world TASK [debug task] ************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************** ok: [localhost] => { \"msg\": \"Hello Monkeyble\" } PLAY RECAP ********************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************* localhost : ok=2 changed=0 unreachable=0 failed=0 skipped=0 rescued=0 ignored=0","title":"Task filters"},{"location":"task_filters/#task-filters","text":"Task filters allow to only test a particular task when the task name is placed into a defined role or play name.","title":"Task filters"},{"location":"task_filters/#syntax","text":"monkeyble_scenarios : validate_test_1 : name : \"Monkeyble hello world\" tasks_to_test : - task : \"debug task\" role : \"role_name\" # the test will be executed if the role matches play : \"play_name\" # the test will be executed if the play matches should_be_changed : true test_input : # config test_output : # config","title":"Syntax"},{"location":"task_filters/#example","text":"# playbook.yml - name : \"play1\" hosts : localhost connection : local gather_facts : false become : false tasks : - name : \"debug task\" debug : msg : \"Hello Monkeyble\" - name : \"play2\" hosts : localhost connection : local gather_facts : false become : false tasks : - name : \"debug task\" debug : msg : \"Hello Monkeyble\" # monkeyble.yml monkeyble_scenarios : validate_test_1 : name : \"Validate task is tested only in play1\" tasks_to_test : - task : \"debug task\" play : play1 test_input : - assert_equal : arg_name : msg expected : \"Hello Monkeyble\" When executed, the task \"debug task\" is only tested when executed from the play named \"play1\" PLAY [play1] ******************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************* Starting Monkeyble callback monkeyble_scenario: validate_test_1 Monkeyble scenario: Validate task is tested only in play1 TASK [debug task] ************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************** {'monkeyble_passed_test': [{'test_name': 'assert_equal', 'tested_value': 'Hello Monkeyble', 'expected': 'Hello Monkeyble'}], 'monkeyble_failed_test': []} ok: [localhost] => { \"msg\": \"Hello Monkeyble\" } PLAY [play2] ******************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************* Starting Monkeyble callback monkeyble_scenario: validate_test_1 Monkeyble scenario: Monkeyble hello world TASK [debug task] ************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************** ok: [localhost] => { \"msg\": \"Hello Monkeyble\" } PLAY RECAP ********************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************* localhost : ok=2 changed=0 unreachable=0 failed=0 skipped=0 rescued=0 ignored=0","title":"Example"},{"location":"test_input/","text":"Test input Syntax Monkeyble allow to check instantiated arguments of a task. Monkeyble config example: monkeyble_scenarios : validate_test_1 : name : \"Monkeyble hello world\" tasks_to_test : - task : \"debug task\" test_input : # list of test case method - assert_equal : arg_name : msg expected : \"Hello Monkeyble\" - assert_not_equal : arg_name : msg expected : \"Goodbye Monkeyble\" A test case method expect two arguments: arg_name : The name of the module argument where monkeyble will check the instantiated value expected : The expected instantiated value passed to the task when executed Test case methods assert_equal # Task example - name : \"test_assert_equal\" debug : msg : \"general kenobi\" # Monkeyble config - task : \"test_assert_equal\" test_input : - assert_equal : arg_name : msg expected : \"general kenobi\" assert_not_equal # Task example - name : \"test_assert_equal\" debug : msg : \"general kenobi\" # Monkeyble config - task : \"test_assert_equal\" test_input : - assert_not_equal : arg_name : msg expected : \"general organa\" assert_in # Task example - name : \"test_assert_in_with_list\" find : path : \"/tmp\" excludes : - \"luke\" - \"obi-wan\" - - name : \"test_assert_in_with_string\" debug : msg : \"anakin\" # Monkeyble config - task : \"test_assert_in_with_list\" test_input : - assert_in : arg_name : excludes expected : \"luke\" - task : \"test_assert_in_with_string\" test_input : - assert_in : arg_name : msg expected : \"kin\" assert_not_in # Task example - name : \"test_assert_in_with_list\" find : path : \"/tmp\" excludes : - \"luke\" - \"obi-wan\" - - name : \"test_assert_in_with_string\" debug : msg : \"anakin\" # Monkeyble config - task : \"test_assert_in_with_list\" test_input : - assert_not_in : arg_name : excludes expected : \"palpatine\" - task : \"test_assert_in_with_string\" test_input : - assert_not_in : arg_name : msg expected : \"not_there\" assert_true # Task example - name : \"test_assert_true\" find : path : \"/tmp\" hidden : true # Monkeyble config - task : \"test_assert_true\" test_input : - assert_true : arg_name : hidden assert_false # Task example - name : \"test_assert_true\" find : path : \"/tmp\" hidden : false # Monkeyble config - task : \"test_assert_false\" test_input : - assert_false : arg_name : hidden assert_is_none # Task example - name : \"assert_is_none\" debug : msg : null # Monkeyble config - task : \"assert_is_none\" test_input : - assert_is_none : arg_name : msg assert_is_not_none # Task example - name : \"test_is_not_none\" debug : msg : \"There's always a bigger fish\" # Monkeyble config - task : \"test_is_not_none\" test_input : - assert_is_not_none : arg_name : msg assert_list_equal # Task example - name : \"test_list_equal\" find : path : \"/tmp\" excludes : - \"tatooine\" - \"naboo\" # Monkeyble config - task : \"test_list_equal\" test_input : - assert_list_equal : arg_name : excludes expected : - \"tatooine\" - \"naboo\" assert_dict_equal # Task example - name : \"test_dict_equal\" uri : url : \"https://www.hpe.com\" headers : key1 : value1 key2 : value2 # Monkeyble config - task : \"test_dict_equal\" test_input : - assert_dict_equal : arg_name : headers expected : key1 : value1 key2 : value2","title":"Test input"},{"location":"test_input/#test-input","text":"","title":"Test input"},{"location":"test_input/#syntax","text":"Monkeyble allow to check instantiated arguments of a task. Monkeyble config example: monkeyble_scenarios : validate_test_1 : name : \"Monkeyble hello world\" tasks_to_test : - task : \"debug task\" test_input : # list of test case method - assert_equal : arg_name : msg expected : \"Hello Monkeyble\" - assert_not_equal : arg_name : msg expected : \"Goodbye Monkeyble\" A test case method expect two arguments: arg_name : The name of the module argument where monkeyble will check the instantiated value expected : The expected instantiated value passed to the task when executed","title":"Syntax"},{"location":"test_input/#test-case-methods","text":"","title":"Test case methods"},{"location":"test_input/#assert_equal","text":"# Task example - name : \"test_assert_equal\" debug : msg : \"general kenobi\" # Monkeyble config - task : \"test_assert_equal\" test_input : - assert_equal : arg_name : msg expected : \"general kenobi\"","title":"assert_equal"},{"location":"test_input/#assert_not_equal","text":"# Task example - name : \"test_assert_equal\" debug : msg : \"general kenobi\" # Monkeyble config - task : \"test_assert_equal\" test_input : - assert_not_equal : arg_name : msg expected : \"general organa\"","title":"assert_not_equal"},{"location":"test_input/#assert_in","text":"# Task example - name : \"test_assert_in_with_list\" find : path : \"/tmp\" excludes : - \"luke\" - \"obi-wan\" - - name : \"test_assert_in_with_string\" debug : msg : \"anakin\" # Monkeyble config - task : \"test_assert_in_with_list\" test_input : - assert_in : arg_name : excludes expected : \"luke\" - task : \"test_assert_in_with_string\" test_input : - assert_in : arg_name : msg expected : \"kin\"","title":"assert_in"},{"location":"test_input/#assert_not_in","text":"# Task example - name : \"test_assert_in_with_list\" find : path : \"/tmp\" excludes : - \"luke\" - \"obi-wan\" - - name : \"test_assert_in_with_string\" debug : msg : \"anakin\" # Monkeyble config - task : \"test_assert_in_with_list\" test_input : - assert_not_in : arg_name : excludes expected : \"palpatine\" - task : \"test_assert_in_with_string\" test_input : - assert_not_in : arg_name : msg expected : \"not_there\"","title":"assert_not_in"},{"location":"test_input/#assert_true","text":"# Task example - name : \"test_assert_true\" find : path : \"/tmp\" hidden : true # Monkeyble config - task : \"test_assert_true\" test_input : - assert_true : arg_name : hidden","title":"assert_true"},{"location":"test_input/#assert_false","text":"# Task example - name : \"test_assert_true\" find : path : \"/tmp\" hidden : false # Monkeyble config - task : \"test_assert_false\" test_input : - assert_false : arg_name : hidden","title":"assert_false"},{"location":"test_input/#assert_is_none","text":"# Task example - name : \"assert_is_none\" debug : msg : null # Monkeyble config - task : \"assert_is_none\" test_input : - assert_is_none : arg_name : msg","title":"assert_is_none"},{"location":"test_input/#assert_is_not_none","text":"# Task example - name : \"test_is_not_none\" debug : msg : \"There's always a bigger fish\" # Monkeyble config - task : \"test_is_not_none\" test_input : - assert_is_not_none : arg_name : msg","title":"assert_is_not_none"},{"location":"test_input/#assert_list_equal","text":"# Task example - name : \"test_list_equal\" find : path : \"/tmp\" excludes : - \"tatooine\" - \"naboo\" # Monkeyble config - task : \"test_list_equal\" test_input : - assert_list_equal : arg_name : excludes expected : - \"tatooine\" - \"naboo\"","title":"assert_list_equal"},{"location":"test_input/#assert_dict_equal","text":"# Task example - name : \"test_dict_equal\" uri : url : \"https://www.hpe.com\" headers : key1 : value1 key2 : value2 # Monkeyble config - task : \"test_dict_equal\" test_input : - assert_dict_equal : arg_name : headers expected : key1 : value1 key2 : value2","title":"assert_dict_equal"},{"location":"test_output/","text":"Test output Syntax Monkeyble allow to check the returned dictionary of a task. Note All modules doesn't return values. Check the documenttion of each module you want to test. Monkeyble config example: monkeyble_scenarios : validate_test_1 : name : \"Monkeyble hello world\" tasks_to_test : - task : \"debug task\" test_output : # list of test case method - assert_equal : result_key : result.module_output_key expected : \"module_output_value\" - assert_dict_equal : result_key : \"result.module_output_key\" expected : some_key : \"some var\" A test case method expect two arguments: result_key : The string path to the key to test in the returned dict expected : The expected instantiated value of the selected 'key' in the result dict Warning result_key is a raw Jinja2 expression without double curly braces like a basic Ansible \"when\" condition Test case methods assert_equal # Task example - name : \"test_output\" set_fact : r2d2 : \"is the coolest robot ever\" # Monkeyble config - task : \"test_output\" test_output : - assert_equal : result_key : result.ansible_facts.r2d2 expected : \"is the coolest robot ever\" assert_not_equal # Task example - name : \"test_output\" set_fact : r2d2 : \"is the coolest robot ever\" # Monkeyble config - task : \"test_output\" test_output : - assert_not_equal : result_key : result.ansible_facts.r2d2 expected : \"is bb8\" assert_in # Task example - name : \"test_output\" set_fact : planets : - \"tatooine\" - \"coruscant\" # Monkeyble config - task : \"test_output\" test_output : - assert_in : result_key : result.ansible_facts.planets expected : \"tatooine\" assert_not_in # Task example - name : \"test_output\" set_fact : planets : - \"tatooine\" - \"coruscant\" # Monkeyble config - task : \"test_output\" test_output : - assert_in : result_key : result.ansible_facts.planets expected : \"naboo\" assert_true # Task example - name : \"test_output\" set_fact : true_bool : true # Monkeyble config - task : \"test_output\" test_output : - assert_true : result_key : result.ansible_facts.true_bool expected : true assert_false # Task example - name : \"test_output\" set_fact : false_bool : false # Monkeyble config - task : \"test_output\" test_output : - assert_false : result_key : result.ansible_facts.false_bool expected : true assert_is_none # Task example - name : \"test_output\" set_fact : null_value : null # Monkeyble config - task : \"test_output\" test_output : - assert_is_none : result_key : result.ansible_facts.null_value assert_is_not_none # Task example - name : \"test_output\" set_fact : saber_color : \"blue\" # Monkeyble config - task : \"test_output\" test_output : - assert_is_not_none : result_key : result.ansible_facts.saber_color assert_list_equal # Task example - name : \"test_output\" set_fact : planets : - \"tatooine\" - \"coruscant\" # Monkeyble config - task : \"test_output\" test_output : - assert_list_equal : result_key : result.ansible_facts.planets expected : - \"tatooine\" - \"coruscant\" assert_dict_equal # Task example - name : \"test_output\" set_fact : side : light : \"yoda\" dark : \"vader\" # Monkeyble config - task : \"test_output\" test_output : - assert_dict_equal : result_key : result.ansible_facts.side expected : light : \"yoda\" dark : \"vader\"","title":"Test output"},{"location":"test_output/#test-output","text":"","title":"Test output"},{"location":"test_output/#syntax","text":"Monkeyble allow to check the returned dictionary of a task. Note All modules doesn't return values. Check the documenttion of each module you want to test. Monkeyble config example: monkeyble_scenarios : validate_test_1 : name : \"Monkeyble hello world\" tasks_to_test : - task : \"debug task\" test_output : # list of test case method - assert_equal : result_key : result.module_output_key expected : \"module_output_value\" - assert_dict_equal : result_key : \"result.module_output_key\" expected : some_key : \"some var\" A test case method expect two arguments: result_key : The string path to the key to test in the returned dict expected : The expected instantiated value of the selected 'key' in the result dict Warning result_key is a raw Jinja2 expression without double curly braces like a basic Ansible \"when\" condition","title":"Syntax"},{"location":"test_output/#test-case-methods","text":"","title":"Test case methods"},{"location":"test_output/#assert_equal","text":"# Task example - name : \"test_output\" set_fact : r2d2 : \"is the coolest robot ever\" # Monkeyble config - task : \"test_output\" test_output : - assert_equal : result_key : result.ansible_facts.r2d2 expected : \"is the coolest robot ever\"","title":"assert_equal"},{"location":"test_output/#assert_not_equal","text":"# Task example - name : \"test_output\" set_fact : r2d2 : \"is the coolest robot ever\" # Monkeyble config - task : \"test_output\" test_output : - assert_not_equal : result_key : result.ansible_facts.r2d2 expected : \"is bb8\"","title":"assert_not_equal"},{"location":"test_output/#assert_in","text":"# Task example - name : \"test_output\" set_fact : planets : - \"tatooine\" - \"coruscant\" # Monkeyble config - task : \"test_output\" test_output : - assert_in : result_key : result.ansible_facts.planets expected : \"tatooine\"","title":"assert_in"},{"location":"test_output/#assert_not_in","text":"# Task example - name : \"test_output\" set_fact : planets : - \"tatooine\" - \"coruscant\" # Monkeyble config - task : \"test_output\" test_output : - assert_in : result_key : result.ansible_facts.planets expected : \"naboo\"","title":"assert_not_in"},{"location":"test_output/#assert_true","text":"# Task example - name : \"test_output\" set_fact : true_bool : true # Monkeyble config - task : \"test_output\" test_output : - assert_true : result_key : result.ansible_facts.true_bool expected : true","title":"assert_true"},{"location":"test_output/#assert_false","text":"# Task example - name : \"test_output\" set_fact : false_bool : false # Monkeyble config - task : \"test_output\" test_output : - assert_false : result_key : result.ansible_facts.false_bool expected : true","title":"assert_false"},{"location":"test_output/#assert_is_none","text":"# Task example - name : \"test_output\" set_fact : null_value : null # Monkeyble config - task : \"test_output\" test_output : - assert_is_none : result_key : result.ansible_facts.null_value","title":"assert_is_none"},{"location":"test_output/#assert_is_not_none","text":"# Task example - name : \"test_output\" set_fact : saber_color : \"blue\" # Monkeyble config - task : \"test_output\" test_output : - assert_is_not_none : result_key : result.ansible_facts.saber_color","title":"assert_is_not_none"},{"location":"test_output/#assert_list_equal","text":"# Task example - name : \"test_output\" set_fact : planets : - \"tatooine\" - \"coruscant\" # Monkeyble config - task : \"test_output\" test_output : - assert_list_equal : result_key : result.ansible_facts.planets expected : - \"tatooine\" - \"coruscant\"","title":"assert_list_equal"},{"location":"test_output/#assert_dict_equal","text":"# Task example - name : \"test_output\" set_fact : side : light : \"yoda\" dark : \"vader\" # Monkeyble config - task : \"test_output\" test_output : - assert_dict_equal : result_key : result.ansible_facts.side expected : light : \"yoda\" dark : \"vader\"","title":"assert_dict_equal"}]}